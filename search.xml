<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用 optimize.minimize(method='SLSQP') 的一些心得]]></title>
    <url>%2Fblog%2F201807%2F%E4%BD%BF%E7%94%A8-optimize-minimize-method-SLSQP-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[最好要有 jac 一般来说 jac 也不是很难求，有 jac 的时候求解答速度会快很多，成功率也会提高很多 初始 x0 最好满足边际约束条件 初始 x0 对求解成功与否有很大影响，而且有的时候如果初始 x0 在边界外，最后就算求解成功了，姐解也可能不满足边界条件。所以初始 x0 满足边界条件是一个好的开始。 比如如果 bounds = [(0, 1), (-1, 1), (0, 3)] ，可以试试 x0 = np.asarray(bounds).mean(axis=1) target 函数的标准化 最好限制 traget 函输出的结果“不要太大”也“不要太小” 比如如果 fun 函数为 123def fun(x): # x 取值范围为 [-1 ,1] return 100 * x[0] + 100 * x[1] - 50 * x[2] 最好把函数变为 12def fun(x): return x[0] + x[1] - 0.5 * x[2] 同理如果有 constraints 最好也这么调整 因为根据 minimize(method=’SLSQP’)，当效用函数 $\min_x \frac{1}{2} \sum_{i=1}^{m} \rho(f_i(x^2))$ $subject\ to\ lb \leqslant x \leqslant ub$ 的精度小于 ftol 这个参数时，停止求解，如果目标函数 $f_i(x)$ 的返回值太大的话，可能会报 Positive directional derivative for linesearch (Exit mode 8) 这个错，或者结果和约束条件的差距的数量级比较高。 Inequality constraints incompatible (Exit mode 4) 这可能是由于 target 函数中有除以0或者接近除以0的错误。 我没有研究过具体代码，我觉得可能是当没有提供 jac 时，target 函数中有除以0或者接近除以0的情况时，会导致估计出的 jac 也非常大，要不就是正的非常大，要不就是负的非常大，这会让求解过程很不稳定，一不小心就会导致解超出 constraints 或者 bounds。 这种情况解决的方法（不一定对）： 通过限制 bounds 使 target 函数不会有除0的情况 减小 eps，即估计 jac 时使用的步长，使 jac 的估计不那么离谱]]></content>
      <tags>
        <tag>python</tag>
        <tag>scipy</tag>
        <tag>optimize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom 配置 - for Python]]></title>
    <url>%2Fblog%2F201704%2FAtom-%E9%85%8D%E7%BD%AE-for-Python%2F</url>
    <content type="text"><![CDATA[Atom 是 Github 开发的一个文本编辑器，高度可定制而不需要写烦人的配置文件,而且有 Github 社区为其开发的丰富的插件。 自带包管理 apm 智能补全, 预装文件浏览树 跨平台编辑 颜控必备, 丰富UI和语法高亮, 还能自己进行配置 听说对前端开发很友好 1. 语法支持(1). language-python Atom 自带的 Python 语法和片段高亮支持。 2. 自动补全和美化(1). autocomplete-python 用于自动补全 Python 变量，方法，函数及其参数。是使用的插件。 (2). python-indent 用于回车自动缩进 (3). atom-beautify 可通过快捷键 control+alt+b 美化当前文件。 3. 运行Python(1). atom-python-run 使 .py 文件可以直接在 Atom 中运行。按 F5 或者 F6 就可以自动打开一个 cmd 运行文件。 Using python.exe Almost the same console with python IDLE, which provides syntax error and runtime error messages. CodeBlocks debug console style Shows return value and execution time It is a rough time based on real time rather than CPU kernel time or CPU user time New an issue if you have any idea of new features. (2). hydrogen 这个插件可以使 Atom 像 Jupyter Notebook 一样在 Atom 编辑器内部逐行运行代码并显示结果。 execute a line, selection, or block at a time rich media support for plots, images, and video watch expressions let you keep track of variables and re-run snippets after every change completions from the running kernel, just like autocomplete in the Chrome dev tools code can be inspected to show useful information provided by the running kernel one kernel per language (so you can run snippets from several files, all in the same namespace) interrupt or restart the kernel if anything goes wrong use a custom kernel connection (for example to run code inside Docker), read more in the “Custom kernel connection (inside Docker)” section 4. 代码规范(1). python-autopep8 自动在保存时修改代码格式使其符合 Python PEP8 规范。 (2). linter-pycodestyle 这个插件可以实时检查代码是否符合 PEP8 规范，并在编辑器左下角提示。 (3). linter-flake8 如果代码写的不规范(PEP8)，或者有语法错误，会弹出提示。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ 复杂变量声明]]></title>
    <url>%2Fblog%2F201608%2Fc-%E5%A4%8D%E6%9D%82%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%2F</url>
    <content type="text"><![CDATA[C++ 有时会出现复杂的声明，这时要注意分析的方法。 c语言变量的声明始终贯彻两点： 声明和使用的语法尽量保持一致 例如：声明一个函数指针 1double (*fun)(double); 使用这个函数指针 123#include &lt;math.h&gt;fun=sin;double result=(*fun)(0.5);//use point fun 声明语句不是的阅读不是按照从左往右的阅读顺序，而是要根据各个符号的优先级进行阅读的 C++声明的优先级规则 A 声明从它的名字开始读取，然后按照优先级顺序依次读取; B 优先级从高到低依次是： B.1 声明中被括号括起来的那部分; B.2 后缀操作符： 括号 () 表示这是一个函数，而 方括号 [] 表示这是一个数组; B.3 前缀操作符：星号 * 表示这是一个”指向…的指针”; C 如果 const 和(或) volatile 关键字的后面紧跟类型说明符(如 int，long 等)，那么它作用于类型说明符。在其他情况下，它作用于关键字左边紧邻的指针星号。 需要强调的重要注意点是，对于优先级: () &gt; [] &gt; * ；结合律是”自右向左”。 i.e. 1char *(* c[10]) (int **p); 步骤 分解 解释 依据 第一步 (c) 最左边的标志符是c A &amp; B.1 第二步 (c[10]) 和后缀[10]结合，表示c一个长度为10的数组 B.2 第三步 (*c[10]) 和*结合表示c[10]中存储的是指针 B.3 第四步 (*c[10])((int **p) 和(int **p)结合，表示”这个指针指向一个函数，函数的参数是二维指针 B.2 第五步 char *(*c[10])((int **p) 和char * 结合，表示”这个函数返回一个指向字符的指针 B.2 所以，c是一个数组[0..9]，它存放着指针，指针指向的函数参数是一个二维指针，返回值是指向字符的指针。 完工!]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Quantopian Turtorials Notes #2]]></title>
    <url>%2Fblog%2F201608%2FQuantopian-Note-2%2F</url>
    <content type="text"><![CDATA[Quantopian笔记系列 Lesson 3 Referencing Securities在 Pipeline API module 中，有两个手动选择证券的方法： sid() 优点： 稳定。一个证券的 sid 不会变，但 ticker 有可能变。 symbol() 缺点： 不稳定。 Lesson 4 Ordering SecuritiesQuantopian 提供了很多下单的方法 order_target_percent(security, percent, style=type): Place an order to adjust a position to a target percent of the current portfolio value. Parameters security: A security object. percent: The portfolio percentage allocated to the security. Positive means buy, negative means sell. type: (optional) Specifies the order style and the default is a market order. The available order styles are: style=MarketOrder(exchange) style=StopOrder(stop_price, exchange) style=LimitOrder(limit_price, exchange) style=StopLimitOrder(limit_price=price1, stop_price=price2, exchange) i.e. 12345678910def initialize(context): context.aapl = sid(24) context.spy = sid(8554)def handle_data(context, data): # Note: data.can_trade() is explained in the next lesson if data.can_trade(context.aapl): order_target_percent(context.aapl, 0.60) if data.can_trade(context.spy): order_target_percent(context.spy, -0.40) 这个例子就是做多 AAPL，价值占整个 portfolio 的 60%， 做空 SPY ETF，价值占整个 portfolio 的 40%。 Lesson 5 The data Objectdata 类包含了可以用在 handle_data() 和 before_trading_start() 以及其它一些 scheduled functions 中的函数 data.current(assets, fields): Can be used to retrieve the most recent value of a given field(s) for a given asset(s). Parameters assets: Asset or iterable of Assets. fields: string or iterable of strings. Valid values are ‘price’, ‘last_traded’, ‘open’, ‘high’, ‘low’, ‘close’, ‘volume’, or column names in Fetcher files. Return Value: 返回值为 单一值 或者 pd.Series 或者 pd.DataFrame 类型。 notes: price 如果找不到 last price，则返回 NaN。 _last_traded_ 返回 last trade 的日期。如果找不到值，则返回 pd.NaT。 volume 返回上一分钟内成交量。 i.e. 1data.current([sid(24), sid(8554)], ['low', 'high']) 这个例子返回一个 pd.DataFrame 类型。 data.can_trade(assets): Is used to determine if an asset(s) is currently listed on a supported exchange and can be ordered. Parameters assets: Asset or iterable of Assets. Return Value: 返回 boolean or Series of booleans, indexed by asset. 如果 asset 有 last price，又在当前的一分钟内可交易，就会返回 true value。 i.e. 1data.can_trade(sid(24)) Lesson 6 The history() Function在 data 对象中有一个常用的函数 —- history()，它是用来获取历史价格和成交量数据的。 history() 包含四个参数：an asset or list of assets, a field or list of fields, an integer lookback window length, 以及 a lookback frequency。 Parameters an list of assets: 这个参数要求股票的 sid 的列表。 a field or list of field: 这个参数要求一个字符串或者列表，可以是 &#39;price&#39;, &#39;open&#39;, &#39;high&#39;, &#39;low&#39;, &#39;close&#39;, 和 &#39;volume&#39; 中的一个（字符串）或者几个（列表）。 an integer lookback window length： 这个参数要求一个整数，代表回看窗口的长度。例如回看窗口长度为2，frequency 参数值为’1d’，则 history() 返回的历史数据的时间跨度为 2 * 1d = 2d 。 a lookback frequency: 这个参数用来定义数据的频率，可以是&#39;1d&#39; (daily) 或者 &#39;1m&#39; (minutely)。 Return value：放回值为 Pandas.Series 或者 Pandas.DataFrame Notes: 如果 frequency 的值为 &#39;1d&#39;，则最近一天的值可能为这一天中某个时刻的值。比如 hist = data.history(sid(24), &#39;price&#39;, 10, &#39;1d&#39;),如果在9：31发出请求，则会返回前9天 AAPL 的收盘价格，和今天9：31分 AAPL 的价格。 i.e. 12345# Get the last 5 minutes of volume data for each security in our list.hist = data.history([sid(24), sid(8554), sid(5061)], 'volume', 5, '1m')# Calculate the mean volume for each security in our DataFrame.mean_volumes = hist.mean(axis=0) 这个例子首先返回一个 Pandas.DataFrame 结构，列分别表示三个资产，行（索引）为不同的时间。然后求出三个资产的平均价格。 1234567# Low and high minute bar history for each of our securities.hist = data.history([sid(24), sid(8554), sid(5061)], ['low', 'high'], 5, '1m')# Calculate the mean low and high over the last 5 minutesmeans = hist.mean()mean_lows = means['low']mean_highs = means['high'] 这个例子首先返回一个 Pandas.Panel 结构，分为三个维度，第一个维度（minor axis）表示不同的三个资产，第二个维度（index）表示最低价和最高价，第三个维度（main axis）表示不同的时间。 然后根据 means = hist.mean() 返回的是一个 library，library 中的键值分别为 &#39;low&#39; 和 &#39;high&#39;，值分别为三个股票的最低价均值和最高价均值的 library。（例如用 means[&#39;low&#39;][&#39;sid(24)&#39;]可以查询 AAPL 的最低价的均值）]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Quantopian</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Quantopian Turtorials Notes #1]]></title>
    <url>%2Fblog%2F201608%2FQuantopian-Note-1%2F</url>
    <content type="text"><![CDATA[Quantopian笔记系列 Lesson 1 Introduction在Quantopian，有两个特殊函数，initialize() 和 handle_data() ： initialize() : to perform any one-time startup logic handle_data() : to decide what orders, if any, should be placed each minute i.e. 1234567def initialize(context): # Reference to AAPL context.aapl = sid(24)def handle_data(context, data): # Position 100% of our portfolio to be long in AAPL order_target_percent(context.aapl, 1.00) 上面这个例子是一个把100%的钱投入到AAPL中。 其中， context.aapl 是给名为 context 的 augmented Python dictionary 添加一个名为 AAPL 的元素。 sid() 函数是 Stock_ID 的意思，sid(24)表示 ID 为24的证券（就是AAPL）。部分sid可以参考 Sid/Ticker Set。其实 sid() 不好用，可以用其他函数直接通过ticker获取股票信息。 order_target_percent 是一个函数，通过字面意思就可以理解，就是把资金按照一定的目标百分比分配给资产组合中到证券（百分比之和可以不等于100%）。这里就是把100%的资金分配给 AAPL。 关于数据源，Quantopian 给免费用户提供 Morningstar fundamentals data，包括柱状历史价格，交易量什么的。还有各种第三方的 Datasets。 Lesson 2 Core Functions一个 Quantopian 的算法有3个核心函数，initialize()，handle_data()和before_trading_start()。 initialize(context) Must have. Is called exactly once when our algorithm starts. context 是 augmented Python dictionary，是一个 global variable。可以通过 dot notation 来获取其中的元素（context.some_property）。 handle_data(context, data) Optional Is called once at the end of each minute. context 和 initialize(context) 中的 context 一样。 data 是包含一些 API function 的对象。 before_trading_start(context, data): Is called once per day before the market opens]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Quantopian</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SWIFT iOS 笔记 - 井字棋]]></title>
    <url>%2Fblog%2F201605%2FSWIFT-iOS-%E7%AC%94%E8%AE%B0%20-%20%E4%BA%95%E5%AD%97%E6%A3%8B%2F</url>
    <content type="text"><![CDATA[今天学做了一个井字棋的游戏， 步骤如下： 1. 准备工作首先是准备素材，一共是三个png格式的图片，用作双方的棋子和棋盘： 2. 布局 首先最下层的棋盘，是 Image View 。 然后是9个可以落子的区域，是在井字格的9个个小方块处各添加一个正方形的 Button。 最后是显示结果的 Label 和 Play Again 按钮，放在最上方，默认隐藏。 3. 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import UIKitclass ViewController: UIViewController &#123; var NextMove = 1 var board = [0,0,0,0,0,0,0,0,0] var Ended = 0 var WinCondition = [[1,2,3],[4,5,6],[7,8,9],[1,4,7],[2,5,8],[3,6,9],[1,5,9],[3,5,7]] var c1 = 0 var c2 = 0 var c3 = 0 var draw = 1 override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. &#125; override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. &#125; @IBOutlet weak var ResultLabel: UILabel! @IBOutlet weak var PlayAgainButtonView: UIButton! @IBAction func Button(sender: AnyObject) &#123; if NextMove == 1 &amp;&amp; board[sender.tag-1]==0 &amp;&amp; Ended==0 &#123; sender.setImage(UIImage(named: "nought.png"), forState: .Normal) NextMove = 2 board[sender.tag-1] = 1 &#125; if NextMove == 2 &amp;&amp; board[sender.tag-1]==0 &amp;&amp; Ended==0 &#123; sender.setImage(UIImage(named: "cross.png"), forState: .Normal) NextMove = 1 board[sender.tag-1] = 2 &#125; for condition in WinCondition &#123; c1 = condition[0]-1 c2 = condition[1]-1 c3 = condition[2]-1 if board[c1]==board[c2] &amp;&amp; board[c2]==board[c3] &amp;&amp; board[c1]*board[c2]*board[c3] != 0 &amp;&amp; Ended==0 &#123; Ended=1 ResultLabel.text="Player \(board[c1]) Win!" ResultLabel.hidden=false PlayAgainButtonView.hidden=false &#125; &#125; for i in board &#123; draw *= i &#125; if draw != 0 &amp;&amp; Ended==0 &#123; Ended=1 ResultLabel.text="Draw" ResultLabel.hidden=false PlayAgainButtonView.hidden=false &#125; else &#123; draw = 1 &#125; &#125; @IBOutlet var CollectionOfViews: Array&lt;UIButton&gt;? @IBAction func PlayAgainButton(sender: AnyObject) &#123; board = [0,0,0,0,0,0,0,0,0] draw = 1 Ended = 0 ResultLabel.hidden = true for Buttons in CollectionOfViews! &#123; Buttons.setImage(nil, forState: .Normal) &#125; PlayAgainButtonView.hidden = true &#125;&#125; 其中，九个 Button 全部连接到 123@IBAction func Button(sender: AnyObject)@IBOutlet var CollectionOfViews: Array&lt;UIButton&gt;? 这两个代码块上； 显示比赛结果的 Label 连接到 1@IBOutlet weak var ResultLabel: UILabel! Play Again Button 连接到 1@IBOutlet weak var PlayAgainButtonView: UIButton! 和 1@IBAction func PlayAgainButton(sender: AnyObject) Anything New 功能类似的UI组件可以链接到同一个代码区块上。比如说9个button，没有功能上的区别，所以就都都连接到同样的两个代码区块上，不用重复建9个。 如果一个代码区块被许多Object链接，可以通过设置tag来区分: 1sender.tag 设置botton的图片的函数为 1sender.setImage(UIImage(named: "nought.png"), forState: .Normal)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>SWIFT</tag>
        <tag>Tic-Tac-Toe</tag>
      </tags>
  </entry>
</search>
